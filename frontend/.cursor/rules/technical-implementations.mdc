# フロントエンド技術実装ガイド

このファイルは、技術的な実装詳細とベストプラクティスを記録します。

---

## 動的スティッキーヘッダー実装

### 実装概要
- **目的**: 上スクロール時にテーブルヘッダーをブラウザ上部に固定
- **方法**: CSS `position: sticky` + 適切な z-index 設定

### CSS実装
```css
.sticky-header {
  position: sticky;
  top: 0;
  z-index: 50;
  background-color: white;
  border-bottom: 2px solid #e5e7eb;
}
```

### React実装
```typescript
<div 
  className="sticky top-0 z-50 bg-white border border-b-2 w-full rounded-t-lg"
  style={{
    position: 'sticky',
    top: '0px',
    zIndex: 50,
    backgroundColor: 'white',
    borderBottom: '2px solid #e5e7eb',
    WebkitPosition: '-webkit-sticky' // Safari対応
  } as React.CSSProperties}
>
```

### ブラウザ対応
- **Chrome/Edge**: 標準対応
- **Firefox**: 標準対応
- **Safari**: `-webkit-sticky` が必要な場合あり

### 注意点
```typescript
// ❌ 親要素に overflow: hidden があると動作しない
<div style={{ overflow: 'hidden' }}>
  <div className="sticky top-0"> {/* 動作しない */}

// ✅ 親要素の overflow を適切に設定
<div style={{ overflow: 'visible' }}>
  <div className="sticky top-0"> {/* 正常動作 */}
```

### トラブルシューティング
```
1. z-index が適切に設定されているか
2. 親要素に overflow: hidden がないか
3. height が明示的に固定されていないか
4. position の競合がないか
5. top 値が正しく設定されているか
```

### 使用例
```typescript
// ユーザー管理テーブルでの実装例
export const StickyHeaderTable = <T,>({ data, columns, ...props }) => {
  return (
    <div className="w-full">
      {/* 動的スティッキーヘッダー */}
      <div className="sticky top-0 z-50 bg-white border border-b-2 shadow-lg w-full rounded-t-lg">
        <Table className="w-full min-w-full">
          <TableHeader>
            {/* ヘッダー定義 */}
          </TableHeader>
        </Table>
      </div>

      {/* データ行 */}
      <div className="w-full border rounded-lg border-t-0">
        <Table className="w-full min-w-full">
          <TableBody>
            {/* データ行定義 */}
          </TableBody>
        </Table>
      </div>
    </div>
  );
};
```

---


---

## Popover+検索機能による横ブレ完全解決

### PopoverSearchFilterコンポーネント設計

#### **核心機能**
```typescript
<Popover modal={false}> {/* 重要: modal={false} */}
  <PopoverTrigger asChild>
    <Button variant="outline">
      {selectedLabel} <ChevronDown className="ml-2 h-4 w-4" />
    </Button>
  </PopoverTrigger>
  <PopoverContent>
    <Input 
      placeholder="検索..."
      value={searchValue}
      onChange={(e) => setSearchValue(e.target.value)}
    />
    <div className="max-h-[200px] overflow-y-auto scrollbar-hidden">
      {filteredOptions.map(option => (
        <Button key={option.value} onClick={() => onSelect(option.value)}>
          {option.label}
        </Button>
      ))}
    </div>
  </PopoverContent>
</Popover>
```

### 主要な技術ポイント

#### **1. modal={false}**
- `data-scroll-locked` 属性が付与されない
- ページスクロールが無効化されない
- 横ブレの根本原因を解決

#### **2. リアルタイム検索**
```typescript
const filteredOptions = useMemo(() => {
  return options.filter(option =>
    option.label.toLowerCase().includes(searchValue.toLowerCase())
  );
}, [options, searchValue]);
```

#### **3. スクロールバー非表示**
```css
.scrollbar-hidden {
  scrollbar-width: none;
  -ms-overflow-style: none;
}
.scrollbar-hidden::-webkit-scrollbar {
  display: none;
}
```

### ドロップダウン実装方式比較

| 方式 | 横ブレ | 検索機能 | 実装コスト | 推奨度 |
|------|--------|----------|-----------|--------|
| Select + CSS調整 | ❌ 発生 | ❌ なし | 中 | ❌ |
| Select + JS動的調整 | ⚠️ 軽減 | ❌ なし | 高 | ⚠️ |
| **PopoverSearchFilter** | ✅ **解決** | ✅ **あり** | 低 | ✅ **推奨** |

---

## 今後の開発方針

### ドロップダウンリスト標準化
1. **新規実装**: 必ず `PopoverSearchFilter` を使用
2. **既存コンポーネント**: 段階的に `PopoverSearchFilter` に移行
3. **品質基準**: 横ブレなし、検索機能あり、UX優先

### 新規実装ガイドライン
```typescript
// ✅ 推奨: PopoverSearchFilter使用
import { PopoverSearchFilter } from '@/components/common/data-display/DataTable';

<PopoverSearchFilter
  options={[
    { value: 'all', label: 'すべて' },
    { value: 'active', label: '有効' },
    { value: 'inactive', label: '無効' }
  ]}
  value={filterValue}
  onSelect={setFilterValue}
  placeholder="ステータス"
/>
```

### 既存コンポーネント移行計画
```typescript
// ❌ 非推奨: Select使用（横ブレ問題あり）
<Select onValueChange={...}>
  <SelectContent> {/* スクロールロック発生 */}

// ✅ 推奨: PopoverSearchFilterに変更
<PopoverSearchFilter {...props} />
```

#### **3. カスタムドロップダウンが必要な場合**
```typescript
// Popoverベースで独自実装
<Popover modal={false}> {/* 必須: modal={false} */}
  <PopoverTrigger>カスタムトリガー</PopoverTrigger>
  <PopoverContent>
    {/* カスタムコンテンツ */}
  </PopoverContent>
</Popover>
```

## コード整理実施済み

### 非推奨コンポーネント削除
- `Select`、`SelectContent`、`SelectItem` 関連のコード削除完了
- 混乱回避のため、旧コンポーネント定義を整理

### レスポンシブテーブル実装

#### **CSS Transition使用**
```css
.fluid-table {
  transition: all 0.2s ease-out;
}
```

#### **動的列幅計算**
```typescript
const getResponsiveColumnWidth = useCallback((baseWidth: number) => {
  const scaleFactor = Math.min(Math.max(containerWidth / 1200, 0.7), 1.3);
  return Math.max(baseWidth * scaleFactor, 60);
}, [containerWidth]);
```

#### **Debounced Resize Handler**
```typescript
useEffect(() => {
  const handleResize = debounce(() => {
    setContainerWidth(containerRef.current?.offsetWidth || 1200);
  }, 150);
  
  window.addEventListener('resize', handleResize);
  return () => window.removeEventListener('resize', handleResize);
}, []);
```

#### **ブレークポイント対応**
```css
/* Container Query 使用 */
@container (max-width: 768px) {
  .table-cell {
    font-size: 0.875rem;
    padding: 0.5rem;
  }
}
```

### 修正済み項目
- UI要素表示乱れ（枠が歪む・テキストがはみ出る）
- パフォーマンス問題（動作速度改善）
- ヘッダー位置が不安定

---

## ページ幅いっぱいテーブル実装

### 実装概要
- **目的**: テーブル要素をページ幅いっぱいに常に広げる
- **方法**: `table-layout: fixed` + パーセンテージベースの列幅

### CSS実装
```css
.table-fixed {
  table-layout: fixed;
  width: 100%;
  transition: all 0.2s ease-out;
}

.table-fixed th,
.table-fixed td {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: width 0.2s ease-out;
}
```

### 列幅計算
```typescript
// パーセンテージベースの列幅設定
width: `${(header.getSize() / table.getCenterTotalSize()) * 100}%`
minWidth: '60px'
```

### 効果
- ✅ ページ幅いっぱいにテーブルが拡張
- ✅ ブラウザリサイズに連動してスムーズに拡縮
- ✅ 列幅の比率を維持
- ✅ 長いテキストは省略表示（...）

---

## パスワードマネージャー誤動作防止実装

### 問題の概要
- **症状**: 1Password、LastPassなどのパスワードマネージャーが、パスワードフィールド以外のテキスト入力フィールドにも反応
- **具体的な問題**:
  - 住所、社員ID、名前などのフィールドで「1Passwordをロック解除」プロンプトが表示
  - 南京錠アイコンや青い円のアイコンが意図しないフィールドに表示
  - ユーザーがパスワードフィールド以外でパスワードマネージャーの機能を誤って起動

### 解決方法

#### **1. 基本属性設定**
```typescript
<Input
  id="address"
  {...register('address')}
  placeholder="住所を入力"
  autoComplete="off"           // ブラウザの自動補完を無効化
  data-1p-ignore="true"       // 1Passwordがこのフィールドを無視
  data-lpignore="true"        // LastPassがこのフィールドを無視
/>
```

#### **2. 適用対象フィールド**
```typescript
// ✅ パスワードマネージャーを無効化すべきフィールド
const fieldsToIgnore = [
  'login_id',      // ログインID
  'employee_id',   // 社員ID
  'name',          // 社員名（漢字）
  'name_kana',     // 社員名（カナ）
  'email',         // メールアドレス
  'phone',         // 電話番号
  'address',       // 住所
  'job_title',     // 役職
  // その他の個人情報フィールド
]

// ❌ パスワードマネージャーを有効にすべきフィールド
const passwordFields = [
  'password',              // パスワード
  'password_confirmation', // パスワード確認
  'current_password',      // 現在のパスワード
  'new_password',          // 新しいパスワード
]
```

#### **3. 実装パターン**
```typescript
// パスワードフィールド以外のすべてのテキスト入力に適用
const getInputProps = (fieldName: string, isPasswordField = false) => {
  if (isPasswordField) {
    return {
      autoComplete: 'current-password', // または 'new-password'
      // パスワードマネージャー関連の属性は設定しない
    }
  }
  
  return {
    autoComplete: 'off',
    'data-1p-ignore': 'true',
    'data-lpignore': 'true',
  }
}

// 使用例
<Input
  id="address"
  {...register('address')}
  {...getInputProps('address', false)}
  placeholder="住所を入力"
/>
```

### 技術的ポイント

#### **属性の効果**
- **`autoComplete="off"`**: ブラウザ標準の自動補完を無効化
- **`data-1p-ignore="true"`**: 1Password拡張機能がフィールドを無視
- **`data-lpignore="true"`**: LastPass拡張機能がフィールドを無視

#### **ブラウザ対応**
- **Chrome/Edge**: 1Password、LastPass、Bitwarden等に対応
- **Firefox**: 1Password、LastPass等に対応
- **Safari**: 1Password等に対応

### 実装ガイドライン

#### **新規実装時**
1. **パスワードフィールド**: `autoComplete="current-password"` または `autoComplete="new-password"`
2. **その他のテキストフィールド**: `autoComplete="off"` + `data-1p-ignore="true"` + `data-lpignore="true"`

#### **既存コンポーネント修正時**
1. パスワードフィールド以外のすべての`Input`コンポーネントに属性を追加
2. フォーム作成・編集・詳細表示の全画面で統一
3. ユーザー管理、取引先管理など、個人情報を含む画面を優先

### トラブルシューティング

#### **問題が解決しない場合**
```typescript
// より強力な無効化
<Input
  autoComplete="new-password"  // パスワードフィールドと誤認させる
  data-1p-ignore="true"
  data-lpignore="true"
  data-form-type="other"       // フォームタイプを明示
/>
```

#### **デバッグ方法**
1. ブラウザの開発者ツールで要素を確認
2. 1Password/LastPassの設定で特定サイトの動作を確認
3. 他のブラウザで動作確認

### 品質基準
- ✅ パスワードフィールド以外でパスワードマネージャーが反応しない
- ✅ ユーザーが意図しないパスワード関連のUIが表示されない
- ✅ パスワードフィールドは通常通り動作する
- ✅ セキュリティとUXのバランスが保たれている